int recursion(int index,int k,vector<int>arr,vector<vector<int>>&dp){
	// if(k==0){
	// 	return 1;
	// }
	if(index==0){
		if(k==0 && arr[0]==0) return 2;
		if(k==0 || k==arr[0]) return 1;
		return 0;
		}
	if(dp[index][k]!=-1) return dp[index][k];

	int not_take=recursion(index-1,k,arr,dp);
	
	int take=arr[index]<=k?recursion(index-1,k-arr[index],arr,dp):0;
	return dp[index][k]=take+not_take;

}


int findWays(vector<int> &arr, int k) {
	int n=arr.size();
	vector<vector<int>>dp(n,vector<int>(k+1,-1));
	return recursion(n-1,k,arr,dp);

}
